<!doctype html>
<html lang="en">
<head>
    <%- include('../partials/head'); %>
    <style>
        #dropzone {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 30%;
            border: 1px solid black;
            min-height: 500px;
            position: relative;
        }

        #dropzone.dragged {
            background-color: #e9ecef;
            /* inside border - - - -*/
            border: 1px dashed #000;
        }

        #filesListContainer{
            width: 100%;
        }

        .uploadHint{
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #7f7f7f;
        }

        .fileEntry {
            padding: 10px;
            border-bottom: 1px solid #e9ecef;
            width: 100%;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
        }

        .fileEntry.selected {
            background-color: #e9ecef;
        }

        .fileEntry span{
            display: block;
            width: 90%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .iframe-placeholder{
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

    </style>
</head>
<body>
<%- include('../partials/candidatHeader'); %>

<main class="p-5 w-100">

    <h2><%= offre.intitule %> - candidature</h2>

    <p><%= offre.description %></p>

    <div class="w-100 d-flex">
        <div style="width:65%; border: 1px solid black; min-height: 500px; margin-right: 5%">
            <iframe
                    hidden
                    src="https://www.africau.edu/images/default/sample.pdf"
                    width="100%"
                    height="100%"
                    id="iframepdf"
            ></iframe>
            <div class="iframe-placeholder">
                <h3>No document selected</h3>
            </div>
        </div>
        <div id="dropzone">
            <div id="filesListContainer"></div>
            <div class="uploadHint">
                <h3>Glissez vos pi√®ces ici</h3>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <form action="/candidat/apply/<%= application.id %>/validate" method="POST">
            <input class="btn btn-primary mt-3" value="Valider le dossier" type="submit"/>
        </form>
    </div>
</main>
<!-- Bootstrap 5 JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/js/bootstrap.min.js"></script>
<script>
    const fileInput = document.getElementById('fileInput');
    const iframepdf = document.getElementById('iframepdf');
    const iframeplaceholder = document.getElementsByClassName('iframe-placeholder')[0];
    const dropZone = document.getElementById('dropzone');

    let files = JSON.parse(`<%- JSON.stringify(fichiers) %>`);
    // let files = [];
    let selectedFile = files.length > 0 ? 0 : null;

    const onDragOver = (event) => {
        event.preventDefault();
        dropZone.classList.add('dragged');
    }

    const onDragLeave = (event) => {
        event.preventDefault();
        dropZone.classList.remove('dragged');
    }

    const updateFilesList = () => {
        const filesListContainer = document.getElementById('filesListContainer');
        filesListContainer.innerHTML = '';
        files.forEach((file, i) => {
            const div = document.createElement('div');
            div.classList.add('fileEntry');
            if (i === selectedFile) div.classList.add('selected');
            const span = document.createElement('span');
            span.innerHTML = file.originalName;
            div.appendChild(span);
            const svgContainer = document.createElement('div');
            svgContainer.innerHTML = `<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 512 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M400 145.49L366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49z"></path></svg>`
            svgContainer.addEventListener("click", (e) => {
                e.stopPropagation();
                const selectedFileBefore = files[selectedFile];
                const fileToDelete = files[i];
                files.splice(i, 1);
                if (selectedFile === i) selectedFile = null;
                else {
                    const selectedFileAfter = files[selectedFile];
                    if (selectedFileBefore !== selectedFileAfter) {
                        selectedFile--;
                    }
                }
                // delete file from server
                fetch('/candidat/apply/<%= application.id %>/file/'+fileToDelete.id, {
                    method: 'DELETE'
                }).then((res) => {
                    updateFilesList();
                }).catch((err) => {
                    console.log(err);
                });
            });
            div.appendChild(svgContainer);
            div.addEventListener("click", () => {
                selectedFile = i;
                updateFilesList();
            });


            filesListContainer.appendChild(div);
        });

        if (selectedFile !== null) {
            iframepdf.hidden = false;
            iframeplaceholder.hidden = true;
            iframepdf.src = "/" + files[selectedFile].path+"#toolbar=0";
            console.log(selectedFile)
        }
        else {
            iframepdf.hidden = true;
            iframeplaceholder.hidden = false;
        }
    }

    // call it once to initialize list
    updateFilesList();

    const uploadFile = (file) => {
        const formData = new FormData();
        formData.append('file', file);
        fetch('/candidat/apply/<%= application.id %>/upload', {
            method: 'POST',
            body: formData
        }).then((res) => {
            res.json().then((data) => {
                files.push(data)
                selectedFile = files.length-1;
                updateFilesList()
            });
        }).catch((err) => {
            console.log(err);
        });
    }

    const onDrop = (event) => {
        event.preventDefault()

        if (event.dataTransfer.items) {
            // Use DataTransferItemList interface to access the file(s)
            [...event.dataTransfer.items].forEach((item, i) => {
                // If dropped items aren't files, reject them
                if (item.kind === "file") {
                    const file = item.getAsFile();
                    uploadFile(file);
                }
            });
        } else {
            // Use DataTransfer interface to access the file(s)
            [...event.dataTransfer.files].forEach((file, i) => {
                uploadFile(file);
            });
        }

        dropZone.classList.remove('dragged');
    }

    dropZone.addEventListener('dragover', onDragOver);
    dropZone.addEventListener('dragleave', onDragLeave);
    dropZone.addEventListener('drop', onDrop);
</script>
</body>
</html>